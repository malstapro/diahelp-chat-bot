from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import DataBase
import config
from datetime import datetime

bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    weight = State()
    height = State()
    age = State()
    gender = State()
    typ = State()
    insulins = State()
    units = State()
    addsug = State()
    sug = State()
    clearsug = State()
    deluser = State()
    settings = State()
    rate = State()
    mgtomol = State()
    moltomg = State()


user = DataBase('users', 'users', config.MONGO_TOKEN, '_id')
defaltUser = {
    'gender': None,
    'type': None,
    'weight': None,
    'height': None,
    'age': None,
    'insulins': [None, None],
    'units': None
}
sug = DataBase('sugars', 'sugars', config.MONGO_TOKEN, '_id')
defaltSug = {
    'sugers': []
}


@dp.message_handler(commands=['del'])
async def delete_user(message: types.Message):
    user[message.from_user.id].delete_user()
    sug[message.from_user.id].delete_user()
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=['menu', '–º–µ–Ω—é'])
async def menu(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('–ú–µ–Ω—é',
                     reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                         [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                         [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
                         [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                         [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                     ]))


@dp.message_handler(commands=['help','–ø–æ–º–æ—â—å'])
async def send_help(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('''–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é: –Ω–∞–ø–∏—à–∏—Ç–µ /menu
    üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω–∏—Ç –±–æ—Ç.
    
    üç¨ –°–∞—Ö–∞—Ä - –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ–ø–µ—Ä—Ü–∞–∏–∏ —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∏ —Ç.–¥.)
    
    ‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω—ã–µ –≤–∞–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏
    
    ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –∞–≤—Ç–æ—Ä–∞ –∏ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.''')


@dp.message_handler(commands=['about','–∞–≤—Ç–æ—Ä'])
async def send_about(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ "Infotech"\n\nCopyright ¬© @tesla33IO 2020 - 2021')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        users = user[message.from_user.id].find()
        for i in users:
            if i['_id'] == message.from_user.id:
                break
    except KeyError:
        await Form.gender.set()
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
                             "–Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ª—é–¥–µ–π –±–æ–ª–µ—é—â–∏—Ö —Å–∞—Ö–∞—Ä–Ω—ã–º –¥–∏–∞–±–µ—Ç–æ–º\n"
                             "–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                             "\n\n*–°–ê–ú–û–õ–ï–ß–ï–ù–ò–ï –ú–û–ñ–ï–¢ –ù–ê–í–†–ï–î–ò–¢–¨ –í–ê–®–ï–ú–£ –ó–î–û–†–û–í–¨–Æ!*", parse_mode="Markdown")
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n"
                             "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton('–ú—É–∂—á–∏–Ω–∞', callback_data='male')],
            [types.InlineKeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞', callback_data='female')]
        ]))
        user[message.from_user.id] = defaltUser
        user[message.from_user.id].save()
        sug[message.from_user.id] = defaltSug
        sug[message.from_user.id].save()


@dp.callback_query_handler(lambda query: query.data == "male" or query.data == "female", state=Form.gender)
async def set_gender(query):
    if query.data == "male":
        user[query.from_user.id]['sex'] = 'male'
        user[query.from_user.id].save()
    elif query.data == "female":
        user[query.from_user.id]['sex'] = 'female'
        user[query.from_user.id].save()
    else:
        print("Error -- setsex -- query!")

    btns = [
        [types.InlineKeyboardButton('1', callback_data='type1')],
        [types.InlineKeyboardButton('2', callback_data='type2')]
    ]
    kb = types.InlineKeyboardMarkup(inline_keyboard=btns)
    await Form.typ.set()
    await bot.send_message(chat_id=query.from_user.id, text="–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞?", reply_markup=kb)


@dp.callback_query_handler(lambda query: query.data == "type1" or query.data == "type2", state=Form.typ)
async def set_type(query):
    if query.data == "type1":
        user[query.from_user.id]['type'] = 'type1'
        user[query.from_user.id].save()
    elif query.data == "type2":
        user[query.from_user.id]['type'] = 'type2'
        user[query.from_user.id].save()
    else:
        print("Error -- settype -- query!")

    await Form.weight.set()
    await bot.send_message(chat_id=query.from_user.id, text="–í–∞—à –≤–µ—Å? (–∫–≥)")


@dp.message_handler(state=Form.weight)
async def set_weight(message: types.Message, state: FSMContext):
    try:
        w = int(message.text)
        if (w <= 150) and (w >= 30):
            user[message.from_user.id]['weight'] = message.text
            user[message.from_user.id].save()
            await Form.height.set()
            await message.answer("–í–∞—à —Ä–æ—Å—Ç? (—Å–º)")
        else:
            await message.answer("–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É. –í–µ—Å –¥–æ–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30 –∏ –Ω–µ –±–æ–ª–µ–µ 150 –∫–≥."
                                 " –ï—Å–ª–∏ –≤–∞—à –≤–µ—Å –º–µ–Ω—å—à–µ 30 –∏–ª–∏ –±–æ–ª—å—à–µ 150,"
                                 " –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è"
                                 "–∫ –≤—Ä–∞—á—É.")
            await Form.weight.set()
    except ValueError:
        await Form.weight.set()
        await message.answer("–í–µ—Å –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏!")


@dp.message_handler(state=Form.height)
async def set_height(message: types.Message, state: FSMContext):
    try:
        h = int(message.text)
        if (h <= 250) and (h >= 40):
            user[message.from_user.id]['height'] = message.text
            user[message.from_user.id].save()
            await Form.age.set()
            await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        else:
            await Form.height.set()
            await message.answer("–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É. –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 40 —Å–º –¥–æ 250 —Å–º.")
    except ValueError:
        await Form.height.set()
        await message.answer("–†–æ—Å—Ç –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏!")


@dp.message_handler(state=Form.age)
async def set_age(message: types.Message, state: FSMContext):
    try:
        a = int(message.text)
        if (a <= 13):
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Å 14 –ª–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è–º –∑–∞ –ø–æ–º–æ—â—å—é.")
            user[message.from_user.id].delete_user()
            sug[message.from_user.id].delete_user()
            await state.finish()
        elif (a >= 14):
            user[message.from_user.id]['age'] = message.text
            user[message.from_user.id].save()
            await Form.insulins.set()
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Å—É–ª–∏–Ω—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    except ValueError:
        await Form.age.set()
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏!")


@dp.message_handler(state=Form.insulins)
async def set_insulins(message: types.Message, state: FSMContext):
    user[message.from_user.id]['insulins'] = message.text.split(',')
    user[message.from_user.id].save()
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton('–º–≥/–¥–ª', callback_data='units_mg')],
        [types.InlineKeyboardButton('–º–º–æ–ª—å/–ª', callback_data='units_mol')]
    ])
    await Form.units.set()
    await message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –µ–¥–µ–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏", reply_markup=kb)


@dp.callback_query_handler(lambda query: query.data == "units_mg" or query.data == "units_mol", state=Form.units)
async def set_units(query, state: FSMContext):
    if query.data == "units_mg":
        user[query.from_user.id]['units'] = 'mg'
        user[query.from_user.id].save()
    elif query.data == "units_mol":
        user[query.from_user.id]['units'] = 'mol'
        user[query.from_user.id].save()
    else:
        print("Error -- setunits -- query!")
    await state.finish()
    kb = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
        [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    ])
    await bot.send_message(chat_id=query.from_user.id, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=kb)


@dp.message_handler(content_types=['text'])
async def statistics(message: types.Message):
    if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        usr = user[message.from_user.id]
        sex = "üë®" if usr['sex'] == 'male' else "üëß"
        typ = "–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 1 —Ç–∏–ø–∞" if usr['type'] == 'type1' else "–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞"
        units = "–º–≥/–¥–ª" if usr['units'] == 'mg' else "–º–º–æ–ª—å/–ª"
        maxsug = 0
        midsug = 0
        minsug = 630.63
        try:
            for i in sug[message.from_user.id]['sugers']:
                if i > maxsug:
                    maxsug = i
                if i < minsug:
                    minsug = i
            if maxsug == 0:
                maxsug = '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.'
            if minsug == 630.63:
                minsug = '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.'
            lst = []
            result = 0
            for i in sug[message.from_user.id]['sugers']:
                lst.append(float(i))
            for j in lst:
                result += j
            midsug = '{:.1f}'.format(result / len(lst))
        except ZeroDivisionError or TypeError:
            midsug = '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.'
        await message.answer(f"""
üî∏ –ü–æ–ª: {sex}
üî∏ {typ}
üî∏ –í–æ–∑—Ä–∞—Å—Ç: _{usr['age']}_
üî∏ –í–µ—Å: _{usr['weight']} –∫–≥_
üî∏ –†–æ—Å—Ç: _{usr['height']} —Å–º_

üî∏ –ò–Ω—Å—É–ª–∏–Ω—ã:
_{' | '.join(usr['insulins'])}_

üî∏ –ï–¥–µ–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:
_{units}_

üî∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏:
_{maxsug}_

üî∏ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏:
_{midsug}_

üî∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏:
_{minsug}_
        """, parse_mode='Markdown')
    elif message.text == "üç¨ –°–∞—Ö–∞—Ä":
        await Form.sug.set()
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
            ]
        ))
    elif message.text == "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await message.answer("""–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –ª—é–¥–µ–π –±–æ–ª—å–Ω—ã—Ö —Å–∞—Ö–∞—Ä–Ω—ã–º –¥–∏–∞–±–µ—Ç–æ–º(–¥–∞–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
—Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. 
                             
–°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
–∑–∞ –ª—é–±—ã–π –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è 100% –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π. 
                             
                             
–°–ê–ú–û–õ–ï–ß–ï–ù–ò–ï –ú–û–ñ–ï–¢ –ù–ê–í–†–ï–î–ò–¢–¨ –í–ê–®–ï–ú–£ –ó–î–û–†–û–í–¨–Æ!""",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=[
                                     [types.KeyboardButton('üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å')],
                                     [types.KeyboardButton('‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')],
                                     [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
                                 ]
                             ))
    elif message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await Form.settings.set()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=[
                                     [types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏')],
                                     [types.KeyboardButton('–ù–∞–∑–∞–¥')],
                                 ]
                             ))
    elif message.text == 'üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å':
        await message.answer('–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!'
                             '\nhttps://t.me/tesla33IO')
    elif message.text == '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        await message.answer('–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –±—ã –æ—Ü–µ–Ω–∏–ª–∏ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞?',
                             reply_markup=types.InlineKeyboardMarkup(
                                 inline_keyboard=[
                                     [types.InlineKeyboardButton('‚≠ê', callback_data='rate1')],
                                     [types.InlineKeyboardButton('‚≠ê‚≠ê', callback_data='rate2')],
                                     [types.InlineKeyboardButton('‚≠ê‚≠ê‚≠ê', callback_data='rate3')],
                                     [types.InlineKeyboardButton('‚≠ê‚≠ê‚≠ê‚≠ê', callback_data='rate4')],
                                     [types.InlineKeyboardButton('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data='rate5')],
                                 ]
                             ))
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        await message.answer('–ú–µ–Ω—é',
                             reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                                 [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                                 [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
                                 [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                                 [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                             ]))


@dp.message_handler(state=Form.sug)
async def sugg(msg: types.Message, state: FSMContext):
    if msg.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
        await Form.addsug.set()
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ (–ù–∞–ø—Ä–∏–º–µ—Ä: 3.5). "
                         "–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ *cancel*", parse_mode="Markdown")
    elif msg.text == "üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å":
        try:
            lst = []
            result = 0
            for i in sug[msg.from_user.id]['sugers']:
                lst.append(float(i))
            for j in lst:
                result += j
            r = result / len(lst)
            await msg.answer('üîπ ' + "{:.1f}".format(r) + ' üîπ')
            await Form.sug.set()
            await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=[
                                     [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                                     [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                                     [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                                     [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                                     [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
                                 ]
                             ))
        except ZeroDivisionError or TypeError:
            await msg.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")
            await Form.sug.set()
            await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                    [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
                ]
            ))
    elif msg.text == "üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏":
        lst = []
        for i in sug[msg.from_user.id]['sugers']:
            lst.append(str(i))
        if len(lst) >= 1:
            await msg.answer('üîπ ' + ' | '.join(lst) + ' üîπ')
            await Form.sug.set()
            await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=[
                                     [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                                     [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                                     [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                                     [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                                     [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
                                 ]
                             ))
        elif len(lst) <= 0:
            await msg.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")
            await Form.sug.set()
            await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                             reply_markup=types.ReplyKeyboardMarkup(
                                 keyboard=[
                                     [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                                     [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
                                 ]
                             ))
        else:
            print('Error --- sugg')
            await state.finish()
    elif msg.text == "üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª":
        await Form.mgtomol.set()
        await msg.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –º–≥/–¥–ª:')
    elif msg.text == "üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª":
        await Form.moltomg.set()
        await msg.answer('–£–∫–∞–∂–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –º–º–æ–ª—å/–ª:')
    elif msg.text == "üîô –ù–∞–∑–∞–¥":
        await state.finish()
        await msg.answer("–ú–µ–Ω—é",
                         reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                             [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                             [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
                             [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                             [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                         ]))


@dp.message_handler(state=Form.addsug)
async def addsug(msg: types.Message, state: FSMContext):
    try:
        suger = float(msg.text)
        max = 0
        min = 0
        if (user[msg.from_user.id]['units'] == 'mol'):
            max = 35
            min = 1
        elif (user[msg.from_user.id]['units'] == 'mg'):
            max = 630.63
            min = 18.02
        if (suger >= min) and (suger <= max):
            s = sug[msg.from_user.id]['sugers']
            s.append(suger)
            sug[msg.from_user.id]['sugers'] = s
            sug[msg.from_user.id].save()
            await msg.answer("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await Form.sug.set()
            await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                    [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                    [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                    [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                    [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
                ]
            ))
        else:
            await Form.addsug.set()
            await msg.answer("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    except ValueError:
        if msg.text == 'cancel' or msg.text == 'Cancel' or msg.text == '–û—Ç–º–µ–Ω–∞' or msg.text == '–æ—Ç–º–µ–Ω–∞':
            await state.finish()
            await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            pass
        else:
            await Form.addsug.set()
            await msg.answer(
                "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —á–∏—Å–ª–æ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –¥—Ä–æ–±—å—é, —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É (–ù–ï –∑–∞–ø—è—Ç—É—é)")


@dp.message_handler(state=Form.mgtomol)
async def mgtomol(msg: types.Message, state: FSMContext):
    try:
        mg = float(msg.text)
        r = mg / 18
        await Form.sug.set()
        await msg.answer(f"{mg} –º–≥/–¥–ª " + "‚âà {:.1f} –º–º–æ–ª—å/–ª".format(r), reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
            ]
        ))
    except Exception as e:
        await Form.sug.set()
        await msg.answer('–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É!', reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
            ]
        ))


@dp.message_handler(state=Form.moltomg)
async def moltomg(msg: types.Message, state: FSMContext):
    try:
        mol = float(msg.text)
        r = mol * 18
        await Form.sug.set()
        await msg.answer(f"{mol} –º–º–æ–ª—å/–ª " + "‚âà {:.2f} –º–≥/–¥–ª".format(r), reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
            ]
        ))
    except Exception as e:
        await Form.sug.set()
        await msg.answer('–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É!', reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')],
                [types.KeyboardButton('üîò –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å')],
                [types.KeyboardButton('üîò –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')],
                [types.KeyboardButton('üîò –ò–∑ –º–≥/–¥–ª –≤ –º–º–æ–ª—å/–ª')],
                [types.KeyboardButton('üîò –ò–∑ –º–º–æ–ª—å/–ª –≤ –º–≥/–¥–ª')],
                [types.KeyboardButton('üîô –ù–∞–∑–∞–¥')],
            ]
        ))


@dp.message_handler(state=Form.settings)
async def settings(msg: types.Message, state: FSMContext):
    txt = msg.text
    if txt == '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏':
        await Form.clearsug.set()
        await msg.answer(
            '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏?\n\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!',
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton('–î–∞, —è —É–≤–µ—Ä–µ–Ω–Ω(–∞)', callback_data='yes')],
                    [types.InlineKeyboardButton('–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)', callback_data='no')],
                ]
            ))
    elif txt == '–ù–∞–∑–∞–¥':
        await state.finish()
        await msg.answer('–ú–µ–Ω—é',
                         reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                             [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                             [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
                             [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                             [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                         ]))


@dp.callback_query_handler(state=Form.clearsug)
async def clearsug(q: types.InlineQueryResult, state: FSMContext):
    if q.data == 'yes':
        await state.finish()
        sug[q.from_user.id]['sugers'] = {}
        sug[q.from_user.id].save()
        await bot.send_message(chat_id=q.from_user.id, text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
                               reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                                   [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                                   [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
                                   [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                                   [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                               ]))
    elif q.data == 'no':
        await state.finish()
        await bot.send_message(chat_id=q.from_user.id, text='–û–ø–µ—Ä–∞–π–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                               reply_markup=types.ReplyKeyboardMarkup(keyboard=[
                                   [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                                   [types.KeyboardButton(text="üç¨ –°–∞—Ö–∞—Ä")],
                                   [types.KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                                   [types.KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                               ]))
    else:
        print("Error --- clearsug")


@dp.callback_query_handler()
async def answer(q, state: FSMContext):
    if q.data == 'rate1' or q.data == 'rate2' or q.data == 'rate3' or q.data == 'rate4' or q.data == 'rate5':
        await bot.send_message(chat_id=-1001388451272, text=f'–û—Ü–µ–Ω–∫–∞: {q.data[-1]}'
                                                            f'\n\nID: {q.from_user.id}\n'
                                                            f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {q.from_user.username}\n'
                                                            f'–í—Ä–µ–º—è: {datetime.now()}')
        await bot.send_message(chat_id=q.from_user.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')
        await state.finish()


async def startup(dispatcher):
    print("== " + str(datetime.now()) + " ==")
    print(str(bot.id) + " :ID")


async def shutdown(dispatcher):
    print("== " + str(datetime.now()) + " ==")


executor.start_polling(dp, skip_updates=True, on_startup=startup, on_shutdown=shutdown)
